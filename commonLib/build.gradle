plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdk 32

    defaultConfig {
        minSdk 26
        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

group = 'com.github.wwwlly'
version = '0.0.1'

afterEvaluate {

    publishing {
        repositories {
            mavenLocal()

            maven {
                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
//                url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
//                url = layout.buildDirectory.dir('repo')
                println("url: $url")
            }
        }

    }

    if (project.getPlugins().hasPlugin('com.android.library')) {

        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            excludes = ['**/*.kt']
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.source
        }
    }

    if (JavaVersion.current().isJava9Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addBooleanOption('html5', true)
            }
        }
    }

    artifacts {
        if (project.getPlugins().hasPlugin('com.android.library')) {

            archives androidSourcesJar
            archives androidJavadocsJar
        }
    }

    android.libraryVariants.all { variant ->

        tasks.androidJavadocs.doFirst {
            classpath += files(variant.javaCompileProvider.get().classpath.files.join(File.pathSeparator))
        }
    }

    publishing.publications.all { publication ->
        println("wwwwww3")
        println("group: $group , version: $version")
        publication.groupId = group
        publication.version = version
        artifactId = 'CommonLibrary'

        publication.artifact androidSourcesJar
        publication.artifact androidJavadocsJar


        pom {
            name = 'CommonLibrary'
            description = 'common library'
            url = 'https://github.com/wwwlly/CommonLibrary'

            licenses {
                license {
                    name = 'The Apache License, Version 2.0'
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }

            developers {
                developer {
                    id = 'wwwlly'
                    name = 'kemp'
                    email = 'wangkp007@foxmail.com'
                }
            }

            scm {
                connection = 'scm:git:git://github.com/wwwlly/CommonLibrary.git'
                developerConnection = 'scm:git:ssh://github.com:wwwlly/CommonLibrary.git'
                url = 'https://github.com/wwwlly/CommonLibrary'
            }
        }
    }

    signing {
        publishing.publications.all { publication ->
            sign publication
        }
    }

}